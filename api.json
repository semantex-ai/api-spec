{
  "openapi": "3.0.1",
  "info": {
    "title": "Semantex API",
    "description": "# What's this? \n\n ### Application APIs \n\n Lets documents, content and metadata be stored in Semantex for further API processing.  To get this data into the Semantex store, document decomposition and ingestion, as well as manual document/content submission APIs can be used.  Once populated, application APIs provide semantic/syntactic analysis, semantic search and content related querying to be executed at scale.  See _APPS_ from the navigation panel for more details. \n\n ### Content APIs \n\n  Content is submitted to endpoints with associated control attributes and results are synchronously returned.  Primary examples of these APIs include: content comparison, enrichment, transformation, and analysis (spellcheck, grammar, sentiment, readability).  See _DOCUMENT_ and _CONTENT_ from the navigation panel for more details.  In this scenario, content is not stored or persisted.\n![](https://semantex.ai/wp-content/uploads/2022/10/Semantex-API-Model-Diagram-scaled.jpg)",
    "contact": {
      "name": "Semantex Support",
      "email": "support@semantex.ai"
    },
    "version": "2022-10-26T00:21:47Z"
  },
  "servers": [
    {
      "url": "https://w1waoh1clk.execute-api.us-east-1.amazonaws.com/{basePath}",
      "variables": {
        "basePath": {
          "default": "semantex-qa"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Text Similarity",
      "description": "Provides multiple text-based similarity algorithms to measure the similarity of input text pairs. The provided algorithms are tuned to measure similarity both in the representation (syntex) and the meaning (semantics) of the text content."
    },
    {
      "name": "Natural Language Processing",
      "description": "Semantex NLP operations' request on provided content"
    },
    {
      "name": "Enrichments/Classification",
      "description": "Text enrichment APIs offer various enrichment functions that take the raw text as its input and provides a specific enrichment/feature corresponding to the input text. An enrichment function is idempotent and its output is determined by the input text and the underlying predictive (deep learning based) linguistic model. Some examples of these include text based sentiment, readability calculation etc. Most of the underlying methods can be used either using a \"GET\" or a \"POST\" HTTP method. For smaller text, the GET method offers better performance and allows for network optimizations such as caching."
    },
    {
      "name": "Text Transformers",
      "description": "Semantex text transformers operations' request on provided content"
    },
    {
      "name": "Spelling & Grammar",
      "description": "Semantex spell and grammar operations' request on provided content"
    },
    {
      "name": "Application",
      "description": "Root resource for all application APIs"
    },
    {
      "name": "Content",
      "description": "Root resource for all content APIs"
    },
    {
      "name": "Document",
      "description": "Root resource for all document APIs"
    },
    {
      "name": "Search",
      "description": "Root resource for all text search APIs"
    },
    {
      "name": "Processing",
      "description": "Document Parse"
    },
    {
      "name": "Self Service",
      "description": "Semantex API Self Service"
    }
  ],
  "paths": {
    "/hub/apps/{id}/ingestion/docx": {
      "post": {
        "tags": [
          "Document"
        ],
        "summary": "Add Document to an Application via Word (docx) Ingestion.",
        "description": "Upload a single Word docx file to add a new document to an existing hub application.",
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "description": "Sets the file name doument metadata. It is not used to etablish uniqueness.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/binaryFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/text/nlp/ner": {
      "get": {
        "tags": [
          "Natural Language Processing"
        ],
        "summary": "NER",
        "description": "Named Entity Recognition (NER) is an NLP task used to identify important named entities in the text such as people, places, organizations, date, or any other category. (Recommend for short text content)",
        "parameters": [
          {
            "name": "lang",
            "in": "query",
            "description": "The two letter language code",
            "required": true,
            "schema": {
              "type": "string",
              "example": "en"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text content with UTF-8 text representation",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Mark Zuckerberg is one of the founders of Facebook, a company from the United States"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Missing required request parameters",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentNLPNER"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Natural Language Processing"
        ],
        "summary": "NER",
        "description": "Named Entity Recognition (NER) is an NLP task used to identify important named entities in the text such as people, places, organizations, date, or any other category. (Recommend for long text content)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contentTextLang"
              },
              "examples": {
                "English Sample": {
                  "value": {
                    "text": "Mark Zuckerberg is one of the founders of Facebook, a company from the United States",
                    "lang": "en"
                  }
                },
                "Spanish Sample": {
                  "value": {
                    "text": "Mark Zuckerberg es uno de los fundadores de Facebook, una empresa de Estados Unidos",
                    "lang": "es"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentNLPNER"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps/{id}/documents/{did}": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "Get Application Document",
        "description": "Get the text content of a specific application document with doc-ID",
        "parameters": [
          {
            "name": "did",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "49a2758a"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubDocumentGet"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "summary": "Put Document",
        "description": "...",
        "parameters": [
          {
            "name": "did",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "403": {
            "description": "403 response",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Document"
        ],
        "summary": "Delete Application Document",
        "description": "Delete a specific application document with doc-ID",
        "parameters": [
          {
            "name": "did",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "d00a2811"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubDocumentDeletion"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "did",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      },
      "head": {
        "summary": "Exist Document",
        "description": "Check whether a specific document exists or not with the doc-ID",
        "parameters": [
          {
            "name": "did",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "403": {
            "description": "403 response",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/text/enrichment/sentiment": {
      "get": {
        "tags": [
          "Enrichments/Classification"
        ],
        "summary": "Sentiment",
        "description": "Perform sentiment analysis based on the given content (recommend for short content). Support English, French and Spanish.",
        "parameters": [
          {
            "name": "lang",
            "in": "query",
            "description": "The two letter language code",
            "required": true,
            "schema": {
              "type": "string",
              "example": "en"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text content with UTF-8 text representation",
            "required": true,
            "schema": {
              "type": "string",
              "example": "We're so happy to see you, and we will be delighted to extend a warm welcome."
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentEnrichmentsSentiment"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Enrichments/Classification"
        ],
        "summary": "Sentiment",
        "description": "Perform sentiment analysis based on the given content (recommend for long content). Support English, French and Spanish.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contentTextLang"
              },
              "examples": {
                "Sample 1 (English)": {
                  "value": {
                    "text": "We're so happy to see you, and we will be delighted to extend a warm welcome.",
                    "lang": "en"
                  }
                },
                "Sample 2 (French)": {
                  "value": {
                    "text": "Je suis très en colère contre toi.",
                    "lang": "fr"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentEnrichmentsSentiment"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/admin/selfservice/confirm-registration": {
      "post": {
        "tags": [
          "Self Service"
        ],
        "summary": "User Confirm Registration",
        "description": "Confirm user's Semantex API account registration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientConfirmRegistration"
              },
              "examples": {
                "Registration Confirmation Sample": {
                  "value": {
                    "email": "demo@semantex.io",
                    "verification-code": "12345"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          },
          "200": {
            "description": "The data was received successfully",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseAdminUserConfirmRegistration"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/text/nlp/pos": {
      "get": {
        "tags": [
          "Natural Language Processing"
        ],
        "summary": "POS",
        "description": "Part-of-speech (POS) tagging is a popular Natural Language Processing process which categorizes words in a text (corpus) in correspondence with a particular part of speech, depending on the definition of the word and its context. (Recommend for short text content)",
        "parameters": [
          {
            "name": "lang",
            "in": "query",
            "description": "The two letter language code",
            "required": true,
            "schema": {
              "type": "string",
              "example": "en"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text content with UTF-8 text representation",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Mark Zuckerberg is one of the founders of Facebook, a company from the United States"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Missing required request parameters",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentNLPPOS"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Natural Language Processing"
        ],
        "summary": "POS",
        "description": "Part-of-speech (POS) tagging is a popular Natural Language Processing process which categorizes words in a text (corpus) in correspondence with a particular part of speech, depending on the definition of the word and its context. (Recommend for long text content)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contentTextLang"
              },
              "examples": {
                "English Sample": {
                  "value": {
                    "text": "Mark Zuckerberg is one of the founders of Facebook, a company from the United States",
                    "lang": "en"
                  }
                },
                "French Sample": {
                  "value": {
                    "text": "Le chef de la police a présenté ses excuses aux communautés noires et autochtones lors d'une conférence de presse tendue.",
                    "lang": "fr"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentNLPPOS"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/admin/selfservice/tokens-generation": {
      "post": {
        "tags": [
          "Self Service"
        ],
        "summary": "User Tokens Generation",
        "description": "Generate user's Semantex API tokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientTokensGeneration"
              },
              "examples": {
                "Token Generation Sample": {
                  "value": {
                    "email": "demo@semantex.io",
                    "password": "Password123"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          },
          "200": {
            "description": "The data was received successfully",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseAdminUserTokensGeneration"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/text/transform/embeddings": {
      "get": {
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "The text content for embedding generation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps/{id}/documents": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "List All Application Documents",
        "description": "List all application documents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubDocumentListAll"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "summary": "Create New Application Document",
        "description": "Create a new application document",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/text": {
      "get": {
        "summary": "Ping",
        "description": "The Ping is a service that allows users to test the API. It can be used to determine when the API is down or behaving unexpectedly, to determine the response times",
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentPing"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps/search/text/uniques": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Unique Text Search",
        "description": "Unique content text search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hubApplicationContentSearchUniques"
              },
              "examples": {
                "Unique Search Sample": {
                  "value": {
                    "aid": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/text/nlp/langdetect": {
      "get": {
        "tags": [
          "Natural Language Processing"
        ],
        "summary": "Lang Detect",
        "description": "Detect the language of the given text content. (Recommend for short text content)",
        "parameters": [
          {
            "name": "algo",
            "in": "query",
            "description": "The algorithm used to detect the source language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text content with UTF-8 text representation",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Google Translate ist ein mehrsprachiger neuronaler maschineller Übersetzungsdienst, der von Google entwickelt wurde, um Texte, Dokumente und Websites von einer Sprache in eine andere zu übersetzen. Es bietet eine Website-Schnittstelle, eine mobile App für Android und iOS und eine API, die Entwicklern hilft, Browsererweiterungen und Softwareanwendungen zu erstellen."
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Missing required request parameters",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentNLPLangDetect"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Natural Language Processing"
        ],
        "summary": "Lang Detect",
        "description": "Detect the language of the given text content. (Recommend for long text content)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contentNLPLangDetect"
              },
              "examples": {
                "English Sample": {
                  "value": {
                    "text": "Mark Zuckerberg is one of the founders of Facebook, a company from the United States"
                  }
                },
                "Spanish Sample": {
                  "value": {
                    "text": "Mark Zuckerberg es uno de los fundadores de Facebook, una empresa de Estados Unidos"
                  }
                },
                "English Sample with all Parameters": {
                  "value": {
                    "text": "Google Translate ist ein mehrsprachiger neuronaler maschineller Übersetzungsdienst, der von Google entwickelt wurde, um Texte, Dokumente und Websites von einer Sprache in eine andere zu übersetzen. Es bietet eine Website-Schnittstelle, eine mobile App für Android und iOS und eine API, die Entwicklern hilft, Browsererweiterungen und Softwareanwendungen zu erstellen.",
                    "ctx": {
                      "algo": "m1",
                      "cache": {
                        "use-cache": false
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentNLPLangDetect"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps/{id}/contents/{cid}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "GET Application Content",
        "description": "Get the appication contents with the specific content-id",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "description": "Content ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "7bdff929"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubContentGet"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Replace Application Content",
        "description": "Replace an existing application content",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "description": "Content ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hubContentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubContentPut"
                }
              }
            }
          },
          "403": {
            "description": "403 response",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Content"
        ],
        "summary": "Delete Application Content",
        "description": "Delete the application content with the specific content-id",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "description": "Content ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "7s1ff929"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Input application ID not found",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubContentDelete"
                }
              }
            }
          },
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      },
      "head": {
        "summary": "Exist Application Content",
        "description": "Check whether the specific application content exists or not",
        "parameters": [
          {
            "name": "cid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubContentExist"
                }
              }
            }
          },
          "403": {
            "description": "403 response",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/docs/parsers/pdf/table": {
      "post": {
        "tags": [
          "Processing"
        ],
        "summary": "PDF Table Extraction",
        "description": "Parse tables in the PDF document",
        "requestBody": {
          "content": {
            "application/pdf": {
              "schema": {
                "$ref": "#/components/schemas/binaryFile"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/binaryFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "The data was received successfully",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentParseTable"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/docs/parsers/docx": {
      "post": {
        "tags": [
          "Processing"
        ],
        "summary": "MS Word (Docx) Content Extraction",
        "description": "Parse Microsoft Word (docx) document",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/binaryFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps/{id}": {
      "get": {
        "tags": [
          "Application"
        ],
        "summary": "Get Application",
        "description": "Get the application with the specific application-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubApplicationListAll"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Application"
        ],
        "summary": "Delete Application",
        "description": "Delete the application with the specific application-id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubApplicationsDelete"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      },
      "head": {
        "summary": "Exists Application",
        "description": "Check whether the application exists or not",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubApplicationExist"
                }
              }
            }
          },
          "403": {
            "description": "403 response",
            "content": {}
          }
        }
      }
    },
    "/admin/selfservice/registration": {
      "post": {
        "tags": [
          "Self Service"
        ],
        "summary": "User Registration",
        "description": "Register user's Semantex API account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientRegistration"
              },
              "examples": {
                "Registration Sample": {
                  "value": {
                    "email": "demo@semantex.io",
                    "password": "Password123",
                    "name": "Semantex-Demo€"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          },
          "200": {
            "description": "The data was received successfully",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseAdminUserRegistration"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps/search/text/compound": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Compound Text Search",
        "description": "Compound text search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hubApplicationTextSearchSimple"
              },
              "examples": {
                "Boolean Search Sample": {
                  "value": {
                    "aid": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01",
                    "query": "(hell* AND sit)"
                  }
                },
                "Phrase Search Sample": {
                  "value": {
                    "aid": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01",
                    "query": "\"sit there\""
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubTextSearch"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/docs/parsers/pdf": {
      "post": {
        "tags": [
          "Processing"
        ],
        "summary": "PDF Content Extraction",
        "description": "Parse PDF document",
        "parameters": [
          {
            "name": "engine",
            "in": "query",
            "description": "An optional parameter that refers to the PDF parser. It should be 'v1' or 'v2'.  The defult version is 'v2'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y_mul",
            "in": "query",
            "description": "An optional hyper-parameter to control text clustering along the y-axis.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "w_mul",
            "in": "query",
            "description": "An optional hyper-parameter to control text clustering along the x-axis.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y_mul_small",
            "in": "query",
            "description": "An optional hyper-parameter to control small font-text clustering along the y-axis.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y_mul_space",
            "in": "query",
            "description": "An optional hyper-parameter for engine=v2, to control text space clustering along the y-axis. Must be used in conjunction with y_mul.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/pdf": {
              "schema": {
                "$ref": "#/components/schemas/binaryFile"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/binaryFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "The data was received successfully",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseDocumentParse"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/text/transform/sentences": {
      "get": {
        "tags": [
          "Text Transformers"
        ],
        "summary": "Text Split",
        "description": "Split the English text content into multiple sentences. Recommend for short text content.",
        "parameters": [
          {
            "name": "lang",
            "in": "query",
            "description": "The two letter language code",
            "required": true,
            "schema": {
              "type": "string",
              "example": "en"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text content with UTF-8 text representation",
            "required": true,
            "schema": {
              "type": "string",
              "example": "I am going to the mall and I will be there for a while. Do you want something from Dr. Smith's office?"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentTextTransformersSplit"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Text Transformers"
        ],
        "summary": "Text Split",
        "description": "Split the English text content into multiple sentences. Recommend for long text content.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contentTextEnglishOnly"
              },
              "examples": {
                "Short Sample": {
                  "value": {
                    "text": "I am going to the mall and I will be there for a while. Do you want something from Dr. Smith's office?",
                    "lang": "en"
                  }
                },
                "Long Sample": {
                  "value": {
                    "text": "Environment Canada has ended tornado watches and warnings for eastern Ontario and western Quebec. Several storms came through the region in the afternoon Thursday bringing severe thunderstorm and tornado watches and warnings along the way. At times all of eastern Ontario and Western Quebec had watches or warnings. The Ottawa airport tweeted around 4:40 p.m. that the storms going through the region may have an impact on flights. Fewer than 300 customers were dealing with power outages that began at 4 p.m. Thursday. Power was restored to the area in River ward just before 10 p.m. A spokesperson for Hydro Ottawa said lightning caused the outages. Watches are issued when Environment Canada determines conditions are favourable for the development of thunderstorms strong enough to include a tornado. Tornado warnings are issued when a tornado has been reported or there's credible evidence one is imminent. The tornado watches come less than a month after a weak tornado in the Casselman, Ont., area and a devastating derecho windstorm that knocked out power to hundreds of thousands of customers in the region and killed at least 10 people across Ontario and Quebec.",
                    "lang": "en"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentTextTransformersSplit"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/text/similarity": {
      "post": {
        "tags": [
          "Text Similarity"
        ],
        "summary": "Text Similarity",
        "description": "Perform the similarity analysis on the given sentence pair, either syntactic or semantic analysis",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/textSimilarity"
              },
              "examples": {
                "1a. Syntactic (how are you)": {
                  "value": {
                    "text1": "how are you",
                    "lang1": "en",
                    "text2": "how old are you",
                    "lang2": "en",
                    "algo": "syn.cosine-word"
                  }
                },
                "1b. Semantic (how are you)": {
                  "value": {
                    "text1": "how are you",
                    "lang1": "en",
                    "text2": "how old are you",
                    "lang2": "en",
                    "algo": "sem.ssm"
                  }
                },
                "2a. Syntactic Miss (English)": {
                  "value": {
                    "text1": "There are three tiers in the Preferred Rewards program - Gold, Platinum and Platinum Honors. Your tier is based on your qualifying combined balances in your Grid Bank deposit and/or Grid investment accounts. Once you are a Preferred Rewards member, you\"ll keep your program benefits for at least a full year, so no need to worry if your balances dip temporarily. In addition, your balances are reviewed monthly to see if you qualify for a higher tier. If so, you\"ll automatically move to the next level of rewards.",
                    "lang1": "en",
                    "text2": "Your qualifying balances in your Grid investment accounts determines your tier. The Preferred Rewards members will keep program benefits for a full year regfardless if the balances dip temporarily. If so, youn will automatically promoted to the next reward level. Gold, Platinum and Platinum Honors are the three tiers in the Preferred Rewards program",
                    "lang2": "en",
                    "algo": "syn.cosine-word"
                  }
                },
                "2b. Semantic Match (English)": {
                  "value": {
                    "text1": "There are three tiers in the Preferred Rewards program - Gold, Platinum and Platinum Honors. Your tier is based on your qualifying combined balances in your Grid Bank deposit and/or Grid investment accounts. Once you are a Preferred Rewards member, you\"ll keep your program benefits for at least a full year, so no need to worry if your balances dip temporarily. In addition, your balances are reviewed monthly to see if you qualify for a higher tier. If so, you\"ll automatically move to the next level of rewards.",
                    "lang1": "en",
                    "text2": "Your qualifying balances in your Grid investment accounts determines your tier. The Preferred Rewards members will keep program benefits for a full year regfardless if the balances dip temporarily. If so, youn will automatically promoted to the next reward level. Gold, Platinum and Platinum Honors are the three tiers in the Preferred Rewards program",
                    "lang2": "en",
                    "algo": "sem.ssm"
                  }
                },
                "2c. Multilingual Semantic Match (English to Spanish)": {
                  "value": {
                    "text1": "There are three tiers in the Preferred Rewards program - Gold, Platinum and Platinum Honors. Your tier is based on your qualifying combined balances in your Grid Bank deposit and/or Grid investment accounts. Once you are a Preferred Rewards member, you\"ll keep your program benefits for at least a full year, so no need to worry if your balances dip temporarily. In addition, your balances are reviewed monthly to see if you qualify for a higher tier. If so, you\"ll automatically move to the next level of rewards.",
                    "lang1": "en",
                    "text2": "Hay tres niveles en el programa Preferred Rewards: Gold, Platinum y Platinum Honors. Su nivel se basa en los saldos combinados que califican en sus cuentas de depósito de Grid Bank y/o cuentas de inversiones de Grid. Una vez que sea miembro de Preferred Rewards, mantendrá los beneficios de su programa por lo menos durante un año completo, así que no tiene que preocuparse si sus saldos bajan temporalmente. Además, sus saldos se revisan mensualmente para ver si usted califica para un nivel más alto. Si es así, pasará automáticamente al siguiente nivel de recompensas.",
                    "lang2": "es",
                    "algo": "sem.ssm"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentSimilarity"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/text/nlp/spellcheck": {
      "get": {
        "tags": [
          "Spelling & Grammar"
        ],
        "summary": "Spelling & Grammar Check",
        "description": "Perform spelling and grammar check on the given content (recommend for short content). Support English, French and Spanish.",
        "parameters": [
          {
            "name": "lang",
            "in": "query",
            "description": "The two letter language code",
            "required": true,
            "schema": {
              "type": "string",
              "example": "en"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text content with UTF-8 text representation",
            "required": true,
            "schema": {
              "type": "string",
              "example": "I'm going to the markte"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentSpellGrammar"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Spelling & Grammar"
        ],
        "summary": "Spelling & Grammar Check",
        "description": "Perform spelling and grammar check on the given content (recommend for long content). Support English, French and Spanish.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contentTextLangSpell"
              },
              "examples": {
                "Spelling Error (English)": {
                  "value": {
                    "text": "I'm going to the markte",
                    "lang": "en"
                  }
                },
                "Spelling Error (French)": {
                  "value": {
                    "text": "je vais au macrhé",
                    "lang": "fr"
                  }
                },
                "Grammar Error (English)": {
                  "value": {
                    "text": "I will going to school",
                    "lang": "en"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentSpellGrammar"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps/{id}/contents": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "List All Application Content",
        "description": "List all contents of the specific application",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubContentListAll"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Create New Application Content",
        "description": "Create a new contents for the specific application",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hubContentCreate"
              },
              "examples": {
                "Sample 1": {
                  "value": {
                    "text": "Hello there, can I sit there. How are you.",
                    "hash": "123456789012345678901234567890_11"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubContentCreate"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/docs/parsers/pdf/image": {
      "post": {
        "tags": [
          "Processing"
        ],
        "summary": "PDF 2 JPEG",
        "description": "Converts the pages of the input PDF file into JPEG with text clusters marked with bounding boxes.",
        "parameters": [
          {
            "name": "engine",
            "in": "query",
            "description": "An optional parameter that refers to the PDF parser. It should be 'v1' or 'v2'.  The defult version is 'v2'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y_mul",
            "in": "query",
            "description": "An optional hyper-parameter to control text clustering along the y-axis.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draw_bb",
            "in": "query",
            "description": "Control if the returned image should have the boundng boxes drawn. ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y_mul_small",
            "in": "query",
            "description": "An optional hyper-parameter to control small font-text clustering along the y-axis.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "w_mul",
            "in": "query",
            "description": "An optional hyper-parameter to control text clustering along the x-axis.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y_mul_space",
            "in": "query",
            "description": "An optional hyper-parameter for engine=v2, to control text space clustering along the y-axis. Must be used in conjunction with y_mul.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/pdf": {
              "schema": {
                "$ref": "#/components/schemas/binaryFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The data was received successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "description": "Provides the RESTFul API specification for the Semantex platform. The specification uses [Open API v3.0.1] standards.\n\n[Open API v3.0.1]: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.1.md \"Open API v3.0.1\"",
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/admin/clients": {
      "get": {
        "summary": "List Users",
        "description": "Get Semantex API clients' information",
        "responses": {
          "200": {
            "description": "The data was received successfully",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseAdminClient"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps/search/text/keyword": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Keyword Text Search",
        "description": "Keyword text search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hubApplicationTextSearchSimple"
              },
              "examples": {
                "Keyword Search Sample": {
                  "value": {
                    "aid": "b6ee555d61df4c0ae30099d3ba4acf5c-67690aa2",
                    "query": "hello"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubTextSearch"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/admin/selfservice/account-deletion": {
      "post": {
        "tags": [
          "Self Service"
        ],
        "summary": "User Account Deletion",
        "description": "Delete user's Semantex API account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientDeletion"
              },
              "examples": {
                "Account Deletion Sample": {
                  "value": {
                    "email": "demo@semantex.io",
                    "access-token": "eyJraWQiOiI1eWsybjlRUjJYMVVQanpCcXJVamJwZlwvanVMWjRYWE"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          },
          "200": {
            "description": "The request was posted successfully",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseAdminUserAccountDeletion"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps/search/text/mlt": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Content Text Similarity Search",
        "description": "Content similarity range search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hubApplicationTextSearchMLT"
              },
              "examples": {
                "Content Similarity Search By Content id": {
                  "value": {
                    "aid": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01",
                    "cid": "dff02fd2",
                    "min": 0.8,
                    "max": 1
                  }
                },
                "Content Similarity Search By Text": {
                  "value": {
                    "aid": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01",
                    "text": "For a fixed rate term, enter the interest rate from the commitment.  Where our commitment shows there is a discount on the posted fixed interest rate, the customer’s fixed interest rate shown in the commitment already reflects the discount.  Please DO NOT deduct the discount from it.",
                    "min": 0.8,
                    "max": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps/{id}/documents/{did}/contents": {
      "get": {
        "tags": [
          "Document"
        ],
        "summary": "List All Application Document Contents",
        "description": "List all document contents with the specific application-ID and document-ID",
        "parameters": [
          {
            "name": "did",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "290310a2"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "b6ee555d61df4c0ae30099d3ba4acf5c-sample-01"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubDocumentContentGet"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Document"
        ],
        "summary": "Create New Application Content",
        "description": "Create a new document content with the application-ID and document-ID",
        "parameters": [
          {
            "name": "did",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "did",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps": {
      "get": {
        "tags": [
          "Application"
        ],
        "summary": "List All Applications",
        "description": "List all applications regards to the user's API key",
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubApplicationListAll"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application"
        ],
        "summary": "Create New Application",
        "description": "Create a new application with the user's API key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/hubApplicationCreate"
              },
              "examples": {
                "Create New Application Sample": {
                  "value": {
                    "name": "Test Application for Semantex API"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubApplicationsCreate"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/hub/apps/{id}/ingestion/pdf": {
      "post": {
        "tags": [
          "Document"
        ],
        "summary": "Add Document to an Application via PDF Ingestion.",
        "description": "Upload a single PDF file to add a new document to an existing hub application.",
        "parameters": [
          {
            "name": "engine",
            "in": "query",
            "description": "An optional parameter that refers to the PDF parser. It should be 'v1' or 'v2'.  The defult version is 'v2'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y_mul",
            "in": "query",
            "description": "An optional hyper-parameter to control text clustering along the y-axis.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Sets the file name doument metadata. It is not used to etablish uniqueness.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y_mul_small",
            "in": "query",
            "description": "An optional hyper-parameter to control small font-text clustering along the y-axis.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "w_mul",
            "in": "query",
            "description": "An optional hyper-parameter to control text clustering along the x-axis.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y_mul_space",
            "in": "query",
            "description": "An optional hyper-parameter for engine=v2, to control text space clustering along the y-axis. Must be used in conjunction with y_mul.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/pdf": {
              "schema": {
                "$ref": "#/components/schemas/binaryFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError2"
                }
              }
            }
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseHubCreateDocPDFIngestion"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    },
    "/text/enrichment/readability": {
      "get": {
        "tags": [
          "Enrichments/Classification"
        ],
        "summary": "Readability",
        "description": "Compute readability scores by different criteria based on the given English content (recommend for short content)",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "The text content with UTF-8 text representation",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Peter is a boy. He lives in a village."
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentEnrichmentsReadability"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Enrichments/Classification"
        ],
        "summary": "Readability",
        "description": "Compute readability scores by different criteria based on the given English content (recommend for long content)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contentTextEnglishOnly"
              },
              "examples": {
                "Sample 1": {
                  "value": {
                    "text": "Environment Canada has ended tornado watches and warnings for eastern Ontario and western Quebec. Several storms came through the region in the afternoon Thursday bringing severe thunderstorm and tornado watches and warnings along the way. At times all of eastern Ontario and Western Quebec had watches or warnings. The Ottawa airport tweeted around 4:40 p.m. that the storms going through the region may have an impact on flights. Fewer than 300 customers were dealing with power outages that began at 4 p.m. Thursday. Power was restored to the area in River ward just before 10 p.m. A spokesperson for Hydro Ottawa said lightning caused the outages. Watches are issued when Environment Canada determines conditions are favourable for the development of thunderstorms strong enough to include a tornado. Tornado warnings are issued when a tornado has been reported or there's credible evidence one is imminent. The tornado watches come less than a month after a weak tornado in the Casselman, Ont., area and a devastating derecho windstorm that knocked out power to hundreds of thousands of customers in the region and killed at least 10 people across Ontario and Quebec.",
                    "lang": "en"
                  }
                },
                "Sample 2": {
                  "value": {
                    "text": "Once upon a time there was a dear little girl who was loved by every one who looked at her, but most of all by her grandmother, and there was nothing that she would not have given to the child. Once she gave her a little hood of red velvet, which suited her so well that she would never wear anything else. So she was always called Little Red Riding Hood. One day her mother said to her: “Come, Little Red Riding Hood, here is a piece of cake and a bottle of wine. Take them to your grandmother, she is ill and weak, and they will do her good. Set out before it gets hot, and when you are going, walk nicely and quietly and do not run off the path, or you may fall and break the bottle, and then your grandmother will get nothing. And when you go into her room, don't forget to say good-morning, and don't peep into every corner before you do it”. “I will take great care, said Little Red Riding Hood to her mother”, and gave her hand on it.",
                    "lang": "en"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid request body",
            "content": {}
          },
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseContentEnrichmentsReadability"
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden (Please input a valid API key)",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "options": {
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "clientConfirmRegistration": {
        "title": "Client Confirm Registration Request",
        "required": [
          "email",
          "verification-code"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Client email address used for registration"
          },
          "verification-code": {
            "type": "string",
            "description": "Verification code received on the registered email"
          }
        },
        "description": "Client confirm registration request"
      },
      "responseContentNLPPOS": {
        "title": "Content POS Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "entities": {
                "minItems": 1,
                "type": "array",
                "description": "A list of POS tagging for the given text content",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "minimum": 1,
                      "type": "integer",
                      "description": "Text identifier"
                    },
                    "text": {
                      "type": "string",
                      "description": "Text content"
                    },
                    "score": {
                      "maximum": 1,
                      "minimum": 0,
                      "type": "number",
                      "description": "Confidence score"
                    },
                    "tag": {
                      "type": "string",
                      "description": "POS tag"
                    },
                    "begin": {
                      "minimum": 0,
                      "type": "integer",
                      "description": "Starting position"
                    },
                    "end": {
                      "minimum": 1,
                      "type": "integer",
                      "description": "Ending position"
                    }
                  },
                  "description": "POS tagging information"
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "responseHubDocumentContentGet": {
        "title": "Hub Document Content Get Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "cids": {
                "minItems": 0,
                "type": "array",
                "description": "List of content-IDs",
                "items": {
                  "type": "string",
                  "description": "Content ID"
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "contentTextEnglishOnly": {
        "title": "Content Text English Only Request",
        "required": [
          "lang",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "The text content with UTF-8 text representation"
          },
          "lang": {
            "type": "string",
            "description": "The two letter language code (English only)",
            "enum": [
              "en",
              "EN"
            ]
          }
        },
        "description": "A simple text content"
      },
      "responseContentEnrichmentsReadability": {
        "title": "Content Enrichments Readability Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "readability": {
                "type": "object",
                "properties": {
                  "smog": {
                    "type": "number",
                    "description": "Smog readability score"
                  },
                  "flesch-reading": {
                    "type": "number",
                    "description": "Flesch-reading readability score"
                  },
                  "flesch-kincaid": {
                    "type": "number",
                    "description": "Flesch-kincaid readability score"
                  },
                  "gunning-fog": {
                    "type": "number",
                    "description": "Gunning-fog readability score"
                  },
                  "coleman-liau": {
                    "type": "number",
                    "description": "Coleman-liau readability score"
                  },
                  "smog-index": {
                    "type": "number",
                    "description": "Smog-index readability score"
                  }
                },
                "description": "readability scores based on different criteria"
              }
            },
            "description": "response body"
          }
        }
      },
      "responseError2": {
        "title": "Error 2 Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": false
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 400
              }
            },
            "description": "response status"
          },
          "error": {
            "type": "object",
            "properties": {
              "cause": {
                "type": "string",
                "description": "Cause of error"
              },
              "message": {
                "type": "string",
                "description": "Error Message"
              }
            },
            "description": "error body"
          }
        }
      },
      "responseHubContentPut": {
        "title": "Hub Application Content Put Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "app-id": {
                "type": "string",
                "description": "Generated Application ID"
              },
              "cid": {
                "type": "string",
                "description": "Generated Content ID"
              }
            },
            "description": "response body"
          }
        }
      },
      "responseHubApplicationListAll": {
        "title": "Hub List All Applications Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "applications": {
                "minItems": 0,
                "type": "array",
                "description": "List of all applications",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Application name"
                    },
                    "client": {
                      "type": "object",
                      "properties": {
                        "api-key": {
                          "type": "string",
                          "description": "Semantex API key"
                        }
                      },
                      "description": "Client information"
                    },
                    "create-date": {
                      "type": "string",
                      "description": "Create-data of application"
                    },
                    "id": {
                      "type": "string",
                      "description": "Application ID"
                    },
                    "count": {
                      "minimum": 0,
                      "type": "integer",
                      "description": "Number of contents in the application"
                    }
                  },
                  "description": "Information of the application"
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "responseHubDocumentDeletion": {
        "title": "Hub Application Document Delete Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Message of successful deletion"
              }
            },
            "description": "response body"
          }
        }
      },
      "responseAdminUserRegistration": {
        "title": "Admint Client User Registration Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "user-registered": {
                "type": "boolean",
                "description": "User account registration status",
                "default": true
              },
              "user-confirmed": {
                "type": "boolean",
                "description": "User account confirmation status",
                "default": false
              },
              "message": {
                "type": "string",
                "description": "Check email for a verification code"
              }
            },
            "description": "response body"
          }
        }
      },
      "responseContentSpellGrammar": {
        "title": "Content Spell and Grammer Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "result": {
                "minItems": 1,
                "type": "array",
                "description": "Matched result of spelling and grammer check",
                "items": {
                  "type": "object",
                  "properties": {
                    "matches": {
                      "minItems": 0,
                      "type": "array",
                      "description": "List of spelling and grammer problems\n\n1st object is for Spelling error\n\n2nd object is for Grammar error",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of checking suggestion",
                            "enum": [
                              "spelling",
                              "grammar"
                            ]
                          },
                          "offset": {
                            "minimum": 0,
                            "type": "integer",
                            "description": "The starting offset of the word's position"
                          },
                          "length": {
                            "minimum": 1,
                            "type": "integer",
                            "description": "The length of the word's position"
                          },
                          "message": {
                            "type": "string",
                            "description": "The message of spelling and grammar checking"
                          },
                          "suggestions": {
                            "minItems": 0,
                            "type": "array",
                            "description": "The potential suggestions of spelling and grammar correction",
                            "items": {
                              "type": "string"
                            }
                          },
                          "rule": {
                            "type": "string",
                            "description": "The rule applid for grammar checking (Grammar check only)"
                          },
                          "description": {
                            "type": "string",
                            "description": "The detailed explanation of grammar checking (Grammar check only)"
                          },
                          "category": {
                            "type": "string",
                            "description": "The category of grammar checking (Grammar check only)"
                          }
                        },
                        "anyOf": [
                          {
                            "required": [
                              "length",
                              "message",
                              "offset",
                              "suggestions",
                              "type"
                            ],
                            "type": "object"
                          },
                          {
                            "required": [
                              "category",
                              "description",
                              "length",
                              "message",
                              "offset",
                              "rule",
                              "suggestions",
                              "type"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "responseContentNLPLangDetect": {
        "title": "Lang Detection Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "description": "The two letter language code"
              },
              "conf": {
                "maximum": 1,
                "minimum": 0,
                "type": "number",
                "description": "The confidence score of the predicted language label"
              }
            },
            "description": "response body"
          }
        }
      },
      "contentTextLangSpell": {
        "title": "Content Text Spelling Check Request",
        "required": [
          "lang",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "The text content with UTF-8 text representation"
          },
          "lang": {
            "type": "string",
            "description": "The two letter language code",
            "enum": [
              "en",
              "fr",
              "es"
            ]
          }
        }
      },
      "responseContentPing": {
        "title": "Content Ping Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "pong": {
                "type": "number",
                "description": "The response time"
              }
            },
            "description": "response body"
          }
        }
      },
      "hubApplicationCreate": {
        "title": "Hub Application Create Request",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "Application Name."
          }
        }
      },
      "responseAdminUserTokensGeneration": {
        "title": "Admint Client User Tokens Generation Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "access-token": {
                "type": "string",
                "description": "Semantex API access token"
              },
              "id-token": {
                "type": "string",
                "description": "Semantex API id token"
              }
            },
            "description": "response body"
          }
        }
      },
      "hubApplicationTextSearchSimple": {
        "title": "Simple Text Search",
        "required": [
          "aid",
          "query"
        ],
        "type": "object",
        "properties": {
          "aid": {
            "type": "string",
            "description": "Application identifier."
          },
          "query": {
            "type": "string",
            "description": "Keywords separated by space."
          }
        },
        "description": "A request model for text search."
      },
      "clientTokensGeneration": {
        "title": "Client Tokens Generation Request",
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Client email address used for registration"
          },
          "password": {
            "type": "string",
            "description": "Password for the client account"
          }
        },
        "description": "Client tokens generation request"
      },
      "responseAdminUserConfirmRegistration": {
        "title": "Admint Client User Confirm Registration Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "user-confirmed": {
                "type": "boolean",
                "description": "User account confirmation status",
                "default": true
              },
              "api-key": {
                "type": "string",
                "description": "Semantex API key"
              }
            },
            "description": "response body"
          }
        }
      },
      "responseHubApplicationsDelete": {
        "title": "Hub Delete Application Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "app-id": {
                "type": "string",
                "description": "Deleted application ID"
              },
              "message": {
                "type": "string",
                "description": "Message of successful deletion"
              }
            },
            "description": "response body"
          }
        }
      },
      "hubApplicationTextSearchMLT": {
        "title": "Simple Text Search",
        "required": [
          "aid"
        ],
        "type": "object",
        "properties": {
          "aid": {
            "type": "string",
            "description": "Application identifier."
          },
          "cid": {
            "type": "string",
            "description": "Source content id for similarity search."
          },
          "text": {
            "type": "string",
            "description": "Source content text for similarity search."
          },
          "min": {
            "maximum": 1,
            "minimum": 0.7,
            "type": "number",
            "description": "Minimum similarity score. The default is 0.80.",
            "default": 0.8
          },
          "max": {
            "maximum": 1,
            "minimum": 0.7,
            "type": "number",
            "description": "Maximum similarity score. The default is 1.0.",
            "default": 1
          }
        },
        "description": "A request model for text search.",
        "oneOf": [
          {
            "required": [
              "cid"
            ],
            "type": "object"
          },
          {
            "required": [
              "text"
            ],
            "type": "object"
          }
        ]
      },
      "responseError": {
        "title": "Error Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": false
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 400
              }
            },
            "description": "response status"
          },
          "cause": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message"
              }
            },
            "description": "cause of error"
          }
        }
      },
      "responseContentParseTable": {
        "title": "Content Parse Table Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "model-version": {
                "type": "string",
                "description": "PDF table parser version"
              },
              "blocks": {
                "minItems": 1,
                "type": "array",
                "description": "Table blocks detected in the PDF\n\n1st object is for PAGE \n\n 2nd object is for WORD \n\n 3rd object is for TABLE \n\n 4th object is for CELL",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "CELL",
                        "PAGE",
                        "WORD",
                        "TABLE"
                      ]
                    },
                    "geometry": {
                      "type": "object",
                      "properties": {
                        "bbox": {
                          "type": "object",
                          "properties": {
                            "width": {
                              "minimum": 0,
                              "type": "number"
                            },
                            "height": {
                              "minimum": 0,
                              "type": "number"
                            },
                            "top": {
                              "minimum": 0,
                              "type": "number"
                            },
                            "left": {
                              "minimum": 0,
                              "type": "number"
                            }
                          }
                        }
                      },
                      "description": "Block geometric information"
                    },
                    "relationships": {
                      "minItems": 0,
                      "type": "array",
                      "description": "Block relationship",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "ids": {
                            "minItems": 0,
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "page-index": {
                      "type": "string"
                    },
                    "text": {
                      "type": "string"
                    },
                    "text-type": {
                      "type": "string"
                    },
                    "conf": {
                      "maximum": 100,
                      "minimum": 0,
                      "type": "number"
                    },
                    "row-index": {
                      "minimum": 1,
                      "type": "integer"
                    },
                    "col-index": {
                      "minimum": 1,
                      "type": "integer"
                    },
                    "row-span": {
                      "minimum": 1,
                      "type": "integer"
                    },
                    "col-span": {
                      "minimum": 1,
                      "type": "integer"
                    }
                  },
                  "description": "Block information",
                  "anyOf": [
                    {
                      "required": [
                        "geometry",
                        "id",
                        "page-index",
                        "relationships",
                        "type"
                      ],
                      "type": "object"
                    },
                    {
                      "required": [
                        "conf",
                        "geometry",
                        "id",
                        "relationships",
                        "text",
                        "text-type",
                        "type"
                      ],
                      "type": "object"
                    },
                    {
                      "required": [
                        "conf",
                        "geometry",
                        "id",
                        "relationships",
                        "type"
                      ],
                      "type": "object"
                    },
                    {
                      "required": [
                        "col-index",
                        "col-span",
                        "conf",
                        "geometry",
                        "id",
                        "relationships",
                        "row-index",
                        "row-span",
                        "type"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "contentNLPLangDetect": {
        "title": "Lang Content Detect Request",
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "The text content with UTF-8 text representation"
          },
          "ctx": {
            "type": "object",
            "properties": {
              "algo": {
                "minLength": 1,
                "type": "string",
                "description": "Algorithm used for langauge detection",
                "default": "m1"
              },
              "cache": {
                "type": "object",
                "properties": {
                  "use-cache": {
                    "type": "boolean",
                    "description": "Whether use cache or not for language detection",
                    "default": false
                  }
                },
                "description": "Cache Parameters"
              }
            },
            "description": "Parameter content for language detection"
          }
        }
      },
      "contentTextLang": {
        "title": "Content Text Lang Request",
        "required": [
          "lang",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "The text content with UTF-8 text representation"
          },
          "lang": {
            "type": "string",
            "description": "The two letter language code",
            "enum": [
              "en",
              "fr",
              "es"
            ]
          }
        },
        "description": "A simple text content"
      },
      "hubContentCreate": {
        "title": "Hub Application Content Create Request",
        "required": [
          "hash",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "Content text in UTF-8"
          },
          "hash": {
            "maxLength": 1024,
            "minLength": 32,
            "type": "string",
            "description": "A hash representation of the content that is to used for equality computation."
          },
          "metadata": {
            "type": "object",
            "properties": {},
            "description": "A key value JSON dictionary."
          },
          "document": {
            "type": "object",
            "properties": {},
            "description": "A key value JSON dictionary."
          }
        },
        "description": "Hub application content create request"
      },
      "responseHubCreateDocPDFIngestion": {
        "title": "Create Document via PDF ingestion Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "did": {
                "type": "string",
                "description": "Document ID"
              },
              "cids": {
                "minItems": 1,
                "type": "array",
                "description": "List of uploaded document's contents",
                "items": {
                  "type": "string",
                  "description": "Document content ID"
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "Empty": {
        "title": "Empty Schema",
        "type": "object"
      },
      "responseContentTextTransformersSplit": {
        "title": "Content Text Transformers Split Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "sentences": {
                "minItems": 1,
                "type": "array",
                "description": "A list of splitted sentences",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "responseHubContentDelete": {
        "title": "Hub Application Content Delete Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "cid": {
                "type": "string",
                "description": "Deleted content ID"
              },
              "message": {
                "type": "string",
                "description": "Message of successful deletion"
              }
            },
            "description": "response body"
          }
        }
      },
      "clientDeletion": {
        "title": "Client Account Deletion Request",
        "required": [
          "access-token",
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Client email address used for registration"
          },
          "access-token": {
            "type": "string",
            "description": "Access token generated from tokens generation utility "
          }
        },
        "description": "Client account deletion request"
      },
      "clientRegistration": {
        "title": "Client Registration Request",
        "required": [
          "email",
          "name",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Client email address used for registration"
          },
          "password": {
            "type": "string",
            "description": "Password for the client account"
          },
          "name": {
            "type": "string",
            "description": "Name for the client account"
          }
        },
        "description": "Client registration request"
      },
      "responseHubContentGet": {
        "title": "Hub Get Application Content Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Content text"
                  },
                  "hash": {
                    "type": "string",
                    "description": "Content's hash for equality computation"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "tag": {
                        "type": "string",
                        "description": "Content type"
                      }
                    },
                    "description": "JSON dictionary"
                  },
                  "id": {
                    "type": "string",
                    "description": "Content ID"
                  }
                },
                "description": "Information of the application content"
              }
            },
            "description": "response body"
          }
        }
      },
      "responseHubApplicationExist": {
        "title": "Hub Application Exist Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "exists": {
                "type": "boolean",
                "description": "Existence of the application"
              }
            },
            "description": "response body"
          }
        }
      },
      "responseHubContentCreate": {
        "title": "Hub Create Application Content Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "cid": {
                "type": "string",
                "description": "Generated application content ID"
              }
            },
            "description": "response body"
          }
        }
      },
      "responseHubTextSearch": {
        "title": "Hub Text Search Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "hits": {
                "minItems": 0,
                "type": "array",
                "description": "List of matched text search results",
                "items": {
                  "type": "object",
                  "properties": {
                    "relevance": {
                      "maximum": 1,
                      "minimum": 0,
                      "type": "number",
                      "description": "Text relevance score"
                    },
                    "text": {
                      "type": "string",
                      "description": "Matched text content"
                    },
                    "id": {
                      "type": "string",
                      "description": "Matched text ID"
                    }
                  },
                  "description": "Information of the matched text search result"
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "binaryFile": {
        "title": "Binary File Request",
        "type": "string",
        "description": "Binary file e.g. pdf",
        "format": "binary"
      },
      "responseHubContentExist": {
        "title": "Hub Application Content Exist Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "exists": {
                "type": "boolean",
                "description": "Existence of the content"
              }
            },
            "description": "response body"
          }
        }
      },
      "responseHubContentListAll": {
        "title": "Hub List All Application Content Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "cids": {
                "minItems": 0,
                "type": "array",
                "description": "List of all application's contents",
                "items": {
                  "type": "string",
                  "description": "Application's content ID"
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "hubApplicationContentSearchUniques": {
        "title": "Unique Text/Content Search",
        "required": [
          "aid"
        ],
        "type": "object",
        "properties": {
          "aid": {
            "type": "string",
            "description": "Application identifier."
          },
          "query": {
            "type": "string",
            "description": "Keywords separated by space."
          }
        },
        "description": "A request model for unique text search."
      },
      "responseDocumentParse": {
        "title": "Content Document Parse Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "pages": {
                "minItems": 1,
                "type": "array",
                "description": "All page information of the PDF document",
                "items": {
                  "type": "object",
                  "properties": {
                    "index": {
                      "minimum": 1,
                      "type": "integer"
                    },
                    "hasAnnotations": {
                      "type": "boolean"
                    },
                    "height": {
                      "minimum": 0,
                      "type": "number"
                    },
                    "width": {
                      "minimum": 0,
                      "type": "number"
                    },
                    "rotation": {
                      "type": "number"
                    },
                    "contains-text": {
                      "type": "boolean"
                    }
                  },
                  "description": "Single page information"
                }
              },
              "fonts": {
                "minItems": 1,
                "type": "array",
                "description": "All font detected in the PDF document",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "family": {
                      "type": "string"
                    },
                    "color-code": {
                      "type": "string"
                    },
                    "size": {
                      "minimum": 0,
                      "type": "number"
                    },
                    "space-size": {
                      "minimum": 0,
                      "type": "number"
                    }
                  },
                  "description": "Font information"
                }
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "finger-print": {
                    "type": "string"
                  },
                  "author": {
                    "type": "string"
                  },
                  "can-modify": {
                    "type": "boolean"
                  },
                  "can-modify-annotations": {
                    "type": "boolean"
                  },
                  "creator": {
                    "type": "string"
                  },
                  "encrypted": {
                    "type": "boolean"
                  },
                  "layout": {
                    "type": "string"
                  },
                  "producer": {
                    "type": "string"
                  }
                },
                "description": "Metadata of the PDF document"
              },
              "contents": {
                "minItems": 1,
                "type": "array",
                "description": "Information of the text content detected in the PDF document",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "minimum": 1,
                      "type": "integer"
                    },
                    "text": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "object",
                          "properties": {
                            "left": {
                              "minimum": 0,
                              "type": "number"
                            },
                            "right": {
                              "minimum": 0,
                              "type": "number"
                            },
                            "top": {
                              "minimum": 0,
                              "type": "number"
                            },
                            "bottom": {
                              "minimum": 0,
                              "type": "number"
                            },
                            "page": {
                              "minimum": 1,
                              "type": "integer"
                            }
                          },
                          "description": "Text location"
                        }
                      },
                      "description": "Text metadata"
                    }
                  },
                  "description": "Text content information"
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "responseAdminUserAccountDeletion": {
        "title": "Admint Client User Account Deletion Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "account-deleted": {
                "type": "boolean",
                "description": "Semantex API account deletion status",
                "default": true
              }
            },
            "description": "response body"
          }
        }
      },
      "responseAdminClient": {
        "title": "Admint Client Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "clients": {
                "type": "array",
                "description": "List of clients",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "textSimilarity": {
        "title": "Text Similarity Request",
        "required": [
          "lang1",
          "lang2",
          "text1",
          "text2"
        ],
        "type": "object",
        "properties": {
          "text1": {
            "minLength": 1,
            "type": "string",
            "description": "The text content with UTF-8 text representation"
          },
          "lang1": {
            "type": "string",
            "description": "The two letter language code",
            "enum": [
              "en",
              "fr",
              "es"
            ]
          },
          "text2": {
            "minLength": 1,
            "type": "string",
            "description": "The text content with UTF-8 text representation"
          },
          "lang2": {
            "type": "string",
            "description": "The two letter language code",
            "enum": [
              "en",
              "fr",
              "es"
            ]
          },
          "algo": {
            "type": "string",
            "description": "# Similarity Algorithms\n## Syntactic Similarity\nThe syntactic similarity algorithms exclusively focus on the representational features of text. The most dominant of these features is the set of tokens (character and words) being used. Different syntactic similarity algorithms exploit these features differently to provide a measure of similarity between an input text pair. The similarity is measured based on a scale of 0 to 1, where 1 represents the best possible match, and 0 indicates the no match scenario. In addition the base algorithms, we also utilize the approach of character and/or word based [shingles](https://en.wikipedia.org/wiki/W-shingling) to add context for increasing the similarity accuracy.  The following syntactic similarity algorithms are supported:\n1. **syn.cosine-with-shingles**: This represents the combination of applying character-based [shingles](https://en.wikipedia.org/wiki/W-shingling)  to the classic [cosine similarity](https://en.wikipedia.org/wiki/Cosine_similarity) algorithm.\n2. **syn.sorensen_dice-shingles**: This represents the combination of applying character-based [shingles](https://en.wikipedia.org/wiki/W-shingling)  to the classic [Sørensen–Dice coefficient](https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient) algorithm.\n3. **syn.jw-shingles**: This represents the combination of applying character-based [shingles](https://en.wikipedia.org/wiki/W-shingling)  to the classic [Jaro–Winkler](https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance) algorithm that is similar in nature to edit distance based measures.\n4. **syn.cosine-word**: This represents the combination of applying *word*-based [shingles](https://en.wikipedia.org/wiki/W-shingling)  to the classic [cosine similarity](https://en.wikipedia.org/wiki/Cosine_similarity) algorithm. Compared to the *syn.cosine-with-shingles*, this algorithm will produce less false positives for larger text pieces.\n5. **syn.simple**: A Semantax proprietary algorithm that is optimized for comparison speed and accuracy. It is based on the [cosine similarity](https://en.wikipedia.org/wiki/Cosine_similarity) algorithm and it combines both character and word based shingles.\n6. **syn.weighted-word**: A Semantax proprietary algorithm that is optimized for comparison speed and accuracy. It is based on the classic [Jaro–Winkler] algorithm. Both character and word based shingles are combined in a weighted capacity to increase the impact of *term-frequency*.\n7. **syn.sentence**: A Semantax proprietary algorithm derived from the classic [cosine similarity](https://en.wikipedia.org/wiki/Cosine_similarity) algorithm. The main feature of this algorithm is the inclusion of NLP (natural language processing) primitives for higher accuracy of similarity comparisons. NLP processing includes lemmatization/stemming, term normalization etc.  This algorithm is best suited for a single sentence, or a couple of short sentences as input.\n8. **syn.paragraph**: A Semantax proprietary algorithm that extends *syn.sentence* to compare a pair of input paragraphs (a set of sentences). In addition to the *syn.sentence* features, this algorithm also includes a weighted [Jaccard Similarity](https://en.wikipedia.org/wiki/Jaccard_index) score of the overlapping sentences across the input pair.\n\n## Semantic Similarity\nThe semantic similarity algorithms focus on comparing the input text pair based on the main concepts present in the text regardless of the words used to represent these concepts. Roughly speaking it is similar to comparing the meaning of the two sentences independent of the words used. See [here](https://en.wikipedia.org/wiki/Semantic_similarity) for more details.\nOur semantic similarity algorithms are created using modern deep learning based [word embeddings](https://en.wikipedia.org/wiki/Word_embedding) trained on enterprise corpus of sample documents. The models are trained on single sentences, and/or short paragraphs as input, and therefore work best for content size in that range.\n\nAll of our semantic similarity algorithms support multi and cross lingual scenarios, where the input text pair can be expressed in any of the supported languages (for example en-en, en-fr, en-es, fr-fr, fr-es etc.). The following semantic similarity algorithms are supported:\n1. **sem.ssm**: The default semantic similarity algorithm that offers the best combination of speed and accuracy with an emphasis on english-to-english common language input pairs.\n2. **sem.ssm14**: This semantic similarity model is trained on data from government, insurance and banking industry verticals. The model is optimized for speed but provides a good level of over all accuracy. \n3. **sem.ssm20**: Similar to *sem.ssm14*, this model is build on a much larger input corpus. \n4. **sem.ssm28**: Builds on the same approach as the previous two models but also includes basic support for higher semantic relationships such as *negation*.",
            "enum": [
              "syn.weighted-word",
              "syn.simple",
              "syn.cosine-with-shingles",
              "syn.sorensen_dice-shingles",
              "syn.cosine-word",
              "syn.jw-shingles",
              "syn.paragraph",
              "syn.sentence",
              "sem.ssm",
              "sem.ssm14",
              "sem.ssm20",
              "sem.ssm28"
            ]
          }
        },
        "description": "Request for text similarity"
      },
      "responseHubApplicationsCreate": {
        "title": "Hub Create Application Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "app-id": {
                "type": "string",
                "description": "Generated application ID"
              }
            },
            "description": "response body"
          }
        }
      },
      "responseContentEnrichmentsSentiment": {
        "title": "Content Enrichments Sentiment Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "description": "The predicted sentiment label",
                "enum": [
                  "POSTIVE",
                  "NEGATIVE"
                ]
              },
              "conf": {
                "type": "object",
                "properties": {
                  "positive": {
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number",
                    "description": "Positive confidence score"
                  },
                  "negative": {
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number",
                    "description": "Negative confidence score"
                  },
                  "neutral": {
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number",
                    "description": "Neutral confidence score"
                  },
                  "mixed": {
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number",
                    "description": "Mixed confidence score"
                  }
                },
                "description": "The confidence score of the sentiment analysis"
              }
            },
            "description": "response body"
          }
        }
      },
      "responseContentSimilarity": {
        "title": "Similairty Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "text1": {
                "type": "string",
                "description": "The first input sentence"
              },
              "text2": {
                "type": "string",
                "description": "The second input sentence"
              },
              "score": {
                "maximum": 1,
                "minimum": 0,
                "type": "number",
                "description": "The computation score of syntactic similarity (For syntactic algorithms only)"
              },
              "prediction": {
                "type": "object",
                "properties": {
                  "match": {
                    "type": "boolean",
                    "description": "The value indicate whether the input sentence pair is semantic similar or not"
                  },
                  "conf": {
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number",
                    "description": "The confidence score of semantic similarity"
                  }
                },
                "description": "The computation result of semantic similarity (For semantic algorithms only)"
              }
            },
            "description": "response body",
            "oneOf": [
              {
                "required": [
                  "score",
                  "text1",
                  "text2"
                ],
                "type": "object"
              },
              {
                "required": [
                  "prediction",
                  "text1",
                  "text2"
                ],
                "type": "object"
              }
            ]
          }
        }
      },
      "responseHubDocumentListAll": {
        "title": "List All Documents Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "documents": {
                "minItems": 0,
                "type": "array",
                "description": "List of documents",
                "items": {
                  "type": "object",
                  "properties": {
                    "did": {
                      "type": "string",
                      "description": "Document ID"
                    },
                    "size": {
                      "minimum": 1,
                      "type": "integer",
                      "description": "Document size"
                    }
                  },
                  "description": "Document information"
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "responseContentNLPNER": {
        "title": "Content NER Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "entities": {
                "minItems": 1,
                "type": "array",
                "description": "A list of recognized named entities",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "Text content"
                    },
                    "score": {
                      "maximum": 1,
                      "minimum": 0,
                      "type": "number",
                      "description": "Confidence score"
                    },
                    "type": {
                      "type": "string",
                      "description": "Named Entity"
                    },
                    "begin": {
                      "minimum": 0,
                      "type": "integer",
                      "description": "Starting position"
                    },
                    "end": {
                      "minimum": 1,
                      "type": "integer",
                      "description": "Ending position"
                    }
                  },
                  "description": "Recognized named entity"
                }
              }
            },
            "description": "response body"
          }
        }
      },
      "responseHubDocumentGet": {
        "title": "Hub Document Get Response",
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Response status",
                "default": true
              },
              "code": {
                "type": "integer",
                "description": "Response status code",
                "default": 200
              }
            },
            "description": "response status"
          },
          "result": {
            "type": "object",
            "properties": {
              "did": {
                "type": "string",
                "description": "Document ID"
              },
              "metadata": {
                "type": "object",
                "description": "Information of the document, e.g. author, layout, fonts, pages, create, etc."
              },
              "size": {
                "minimum": 0,
                "type": "integer",
                "description": "Number of contents in the document"
              },
              "cids": {
                "minItems": 0,
                "type": "array",
                "description": "List of contents",
                "items": {
                  "type": "string",
                  "description": "Content ID"
                }
              }
            },
            "description": "response body"
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "CONTENT/TEXT ANALYSIS",
      "tags": [
        "Text Similarity",
        "Natural Language Processing",
        "Enrichments/Classification",
        "Text Transformers",
        "Spelling & Grammar"
      ]
    },
    {
      "name": "HEADLESS CONTENT HUB",
      "tags": [
        "Application",
        "Content",
        "Document",
        "Search"
      ]
    },
    {
      "name": "DOCUMENT",
      "tags": [
        "Processing"
      ]
    },
    {
      "name": "ADMINISTRATION",
      "tags": [
        "Self Service"
      ]
    }
  ]
}
